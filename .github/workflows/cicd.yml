name: CI/CD Pipeline with SonarCloud and Security Scans

on:
  push:
    branches:
      - main
      - feature/*
      
jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    # 1. Checkout source code (default branch first)
    - name: Checkout source code
      uses: actions/checkout@v3

    # 2. Install dependencies
    - name: Install unzip and curl
      run: sudo apt-get update && sudo apt-get install -y unzip curl

    # 3. Set up Java for SonarCloud
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 4. Cache SonarCloud
    - name: Cache SonarCloud
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar

    # 5. SonarCloud Scan
    - name: SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner-cli-5.0.1.3006-linux.zip
        mv sonar-scanner-5.0.1.3006-linux sonar-scanner
        export PATH=$(pwd)/sonar-scanner/bin:$PATH
        sonar-scanner \
          -Dsonar.projectKey=Prasadrasal2002_interior-web-app \
          -Dsonar.organization=prasadrasal2002 \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${SONAR_TOKEN}

    # 6. Cache OWASP Dependency Check
    - name: Cache OWASP Dependency Check
      uses: actions/cache@v4
      with:
        path: ~/.dependency-check
        key: ${{ runner.os }}-dependency-check

    # 7. OWASP Dependency Check (JSON to avoid HTML error)
    - name: OWASP Dependency Check
      run: |
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
        unzip dependency-check-8.4.0-release.zip -d dc
        chmod +x dc/dependency-check/bin/dependency-check.sh
        ./dc/dependency-check/bin/dependency-check.sh \
          --project "interior-web-app" \
          --scan . \
          --format "JSON" \
          --out ./reports \
          --disableAssembly

    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: ./reports

    # 8. Trivy Scan
    - name: Trivy File System Scan
      uses: aquasecurity/trivy-action@0.11.2
      with:
        scan-type: fs
        scan-ref: .
      continue-on-error: true

    # 9. Checkout Dockerfile branch
    - name: Checkout Dockerfile branch
      uses: actions/checkout@v3
      with:
        ref: feature/docker-setup

    - name: List files for debug
      run: ls -la

    # 10. Docker Hub Login
    - name: Docker Hub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 11. Build Docker Image
    - name: Build Docker Image
      run: docker build -t devopscode44/interior-web-app:latest .

    # 12. Docker Scout Scan
    - name: Docker Scout Scan
      uses: docker/scout-action@v1
      with:
        image: devopscode44/interior-web-app:latest
        command: cves
        dockerhub-user: ${{ secrets.DOCKER_USERNAME }}
        dockerhub-password: ${{ secrets.DOCKER_PASSWORD }}
        summary: true
        format: json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        write-comment: true
      continue-on-error: true

    # 13. Push Docker Image
    - name: Push Docker Image
      run: docker push devopscode44/interior-web-app:latest

    # 14. Checkout Helm chart branch
    - name: Checkout Helm Chart
      uses: actions/checkout@v3
      with:
        ref: feature/helm-chart-setup

    # 15. Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    # 16. Update kubeconfig for EKS
    - name: Update kubeconfig for EKS
      run: aws eks update-kubeconfig --region ap-south-1 --name interior-app-eks

    # 17. Deploy with Helm
    - name: Deploy using Helm
      run: |
        helm upgrade --install flask-app ./flask-app \
          --namespace default \
          --create-namespace

    # 18. Wait for ALB DNS
    - name: Wait for ALB Ingress DNS
      run: |
        echo "Waiting for ALB DNS..."
        for i in {1..30}; do
          DNS=$(kubectl get ingress flask-app -n default -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          if [[ "$DNS" != "" ]]; then
            echo "ALB DNS: $DNS"
            echo "DNS=$DNS" >> $GITHUB_ENV
            break
          fi
          echo "Still waiting ($i)..."
          sleep 10
        done

    # 19. Patch Ingress host
    - name: Patch Ingress Host for .nip.io
      run: |
        kubectl patch ingress flask-app -n default \
          --type=json \
          -p='[{"op": "replace", "path": "/spec/rules/0/host", "value": "flask-app.${{ env.DNS }}.nip.io"}]'
